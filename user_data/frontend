#!/bin/bash
#todo;
_TIMER_USER_DATA_START="$(date +%T)"

AWSTOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
INSTANCE_LOCAL_IP=$(curl -s -H "X-aws-ec2-metadata-token: $${AWSTOKEN}" http://169.254.169.254/latest/meta-data/local-ipv4)
INSTANCE_ID=$(curl -s -H "X-aws-ec2-metadata-token: $${AWSTOKEN}" http://169.254.169.254/latest/meta-data/instance-id)
INSTANCE_TYPE=$(curl -s -H "X-aws-ec2-metadata-token: $${AWSTOKEN}" http://169.254.169.254/latest/meta-data/instance-type)

## installation
apt-get update
apt-get -qqy install ${EXTRA_PACKAGES_DEB}
pip3 install git-remote-codecommit

_TIMER_USER_DATA_APT="$(date +%T)"


mkdir -p ${WEB_ROOT_PATH}
cd ${WEB_ROOT_PATH}
su ${OS_USER} -s /bin/bash -c "git clone -b %{ if "${INSTANCE_NAME}" != "staging" }main%{ else }staging%{ endif } ${CODECOMMIT_APP_REPO} ."
chown -R $OS_USER:$OS_USER ${WEB_ROOT_PATH}
chmod 775 ${WEB_ROOT_PATH}

_TIMER_USER_DATA_MOUNT="$(date +%T)"

## install nginx
curl -s https://nginx.org/keys/nginx_signing.key | gpg --dearmor >/usr/share/keyrings/nginx-archive-keyring.gpg
echo "deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] http://nginx.org/packages/mainline/debian $(lsb_release -cs) nginx" >/etc/apt/sources.list.d/nginx.list
echo -e "Package: *\nPin: origin nginx.org\nPin: release o=nginx\nPin-Priority: 900\n" >/etc/apt/preferences.d/99nginx

apt-get -qq update -o Dir::Etc::sourcelist="sources.list.d/nginx.list" -o Dir::Etc::sourceparts="-" -o APT::Get::List-Cleanup="0"
apt-get -qqy install nginx

cd /etc/nginx
git init
git remote add origin ${CODECOMMIT_SERVICES_REPO}
git fetch
git reset --hard origin/nginx_${INSTANCE_NAME}
git checkout -t origin/nginx_${INSTANCE_NAME}

mkdir -p /etc/nginx/sites-enabled
ln -s /etc/nginx/sites-available/ghost.conf /etc/nginx/sites-enabled/ghost.conf

sed -i "s/example.com/%{ if "${INSTANCE_NAME}" != "staging" }${DOMAIN}%{ else }${STAGING_DOMAIN}%{ endif }/g" /etc/nginx/sites-available/ghost.conf
sed -i "s/example.com/%{ if "${INSTANCE_NAME}" != "staging" }${DOMAIN}%{ else }${STAGING_DOMAIN}%{ endif }/g" /etc/nginx/nginx.conf
sed -i "s,/var/www/html,${WEB_ROOT_PATH},g" /etc/nginx/sites-available/ghost.conf
echo "" >/etc/nginx/conf.d/default.conf

systemctl daemon-reload
systemctl restart nginx.service


## install nodejs
curl -fsSL https://deb.nodesource.com/setup_${NODE_VERSION} | sudo -E bash -
apt-get install -y nodejs

curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | gpg --dearmor | sudo tee /usr/share/keyrings/yarnkey.gpg >/dev/null
echo "deb [signed-by=/usr/share/keyrings/yarnkey.gpg] https://dl.yarnpkg.com/debian stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
apt-get update && sudo apt-get install yarn
yarn global add knex-migrator ember-cli


## Miscelnous
# hostnamectl set-hostname server.${DOMAIN} --static
# echo "127.0.0.1 $(hostname)" >> /etc/hosts
timedatectl set-timezone ${TIMEZONE}

## AWS Monitoring
cd /usr/local/src
wget https://s3.${AWS_DEFAULT_REGION}.amazonaws.com/amazon-ssm-${AWS_DEFAULT_REGION}/latest/debian_arm64/amazon-ssm-agent.deb
dpkg -i amazon-ssm-agent.deb
systemctl enable amazon-ssm-agent

wget https://s3.${AWS_DEFAULT_REGION}.amazonaws.com/amazoncloudwatch-agent-${AWS_DEFAULT_REGION}/ubuntu/arm64/latest/amazon-cloudwatch-agent.deb
dpkg -i amazon-cloudwatch-agent.deb
/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c ssm:amazon-cloudwatch-agent-${INSTANCE_NAME}.json

chmod 750 /usr/bin/aws
